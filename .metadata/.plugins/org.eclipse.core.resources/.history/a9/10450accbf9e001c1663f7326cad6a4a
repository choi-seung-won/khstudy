package day0308;
// for 반복문
// for 반복문이나 while 반복문이나
// 모두 코드를 반복시키는게 목적이다.
// 하지만 반복횟수와 연관이 적은편인 while 반복문과는 다르게
// for반복문은 좀더 횟수와 연관이 된 반복문이다.

// for 반복문은 다음과 같은 구조로 이루어진다
// for(제어변수의 선언과 초기화; 반복 조건식; 코드 실행 후 제어변수의 변화식){
//      반복할코드
// }
public class Ex05For {
    
    public static void main(String[] args) {
        // 1부터 4까지 차례대로 출력하는 for 반복문
        for(int i = 1; i <= 4; i++ ) {
            System.out.println(i);
        }
        
        // 위의 for반복문은 다음과같은 순서를 거친다.
        // 1. int i = 1;이실행되서 i의 현재값이 1이된다.
        // 2. i <= 4;가 실행되는데 i의 현재 값이 1이므로 true가 나옴.
        // 3. 조건식이 true가 나왔으므로 반복할코드인 sysout i가 실행되서
        // 화면에 1이 출력된다.
        // 4. 더이상 반복시킬 코드가 없으므로 변화식인 i++이 실행되서 i의 현재값이 2가된다.
        // 5. i <=4가 실행되는데 i의 현재값이 2이므로 true가나온다.
        // 6. 조건식이 true가 나왔으므로 반복할코드인 sysout i가 실행되서 화면에 2가 출력된다.
        // 7.  더이상 반복시킬 코드가 없으므로 변화식인 i++이 실행되서 i의 현재값이 3이된다.
        // 8. i <=4가 실행되는데 i의 현재값이 3이므로 true가나온다.
        // 9. 조건식이 true가 나왔으므로 반복할코드인 sysout i가 실행되서 화면에 3이 출력된다.
        // 10. 더이상 반복시킬 코드가 없으므로 변화식인 i++이 실행되서 i의 현재값이 4가 된다.
        // 11. i <=4가 실행되는데 i의 현재값이 4이므로 true가나온다.
        // 12. 조건식이 true가 나왔으므로 반복할코드인 sysout i가 실행되서 화면에 4가 출력된다.
        // 13. 더이상 반복시킬 코드가 없으므로 변화식인 i++이 실행되서 i의 현재값이 5가 된다.
        // 14. i <=4가 실행되는데 i의 현재값이 5이므로 false 가나와 for반복문이 종료된다.
        
        
        // for 반복문정보
        // 1. 제어변수의 초기화나 조건식에 다른변수가 들어갈 수도 있다.
        int start = 3;
        int end = 7;
        for ( int i = start; i <= end; i ++) {
            System.out.println(i);
        }
    }

}
